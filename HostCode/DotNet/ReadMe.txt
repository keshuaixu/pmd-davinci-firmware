PMDLibrary.vb 
----------------------------------------
The file PMDLibrary.vb contains Visual Basic .NET code for calling the
C procedures documented in the Prodigy/CME Programmer's Reference, and
may be included in any VB.NET project that communicates with a
Prodigy/CME card.

The compiled code for the C library procedures is found in
C-Motion.dll, which must be in the execution path of any Visual Basic
application using PMDLibrary.vb.

In order to build the dll, change directory to
"Documents\CMESDK\HostCode\DLLBuild", and execute
build.bat, which will install debug and release versions of
C-Motion.dll in "pmd\Motion_Boards\Prodigy-CME\CMESDK\HostCode\Debug"
and "Documents\CMESDK\HostCode\Release".
Pre-built dlls are included in the installation.

Several classes are defined:
----------------------------------------

Peripherals:
The New method of each of these classes accepts whatever data are necessary to specify the peripheral.

  PMDPeripheralCOM
  PMDPeripheralMultiDrop
  PMDPeripheralCME
  PMDPeripheralPCI
  PMDPeripheralTCP

PMDDevice:  The New method of PMDDevice accepts a peripheral and an enum specifying either
            a motion processor device or a PRP device:

  Dim dev As New PMDDevice(periph, PMDDeviceType.ResourceProtocol)

or

  Dim dev As New PMDDevice(periph, PMDDeviceType.MotionProcessor)


PMDAxis:  The New method of PMDAxis accepts a PRP device and a PMDAxisNumber enumeration:

  Dim ax1 As new PMDAxis(dev, PMDAxisNumber.Axis1)


PMDMemory:  The New method of PMDMemory accepts a PRP device and a data size, currently only
            PMDDataSize.Size32Bit is actually supported.

The first argument taken by a C procedure determines which class it
belongs to, a pointer to an axis handle maps to a PMDAxis method, a
device handle to a PMDDevice method, and so forth.

Whenever a library C procedure returns a status code other than
PMD_NOERROR (PMDresult.NOERROR) an exception will be thrown.  The Data
member of the exception will contain a Data property with the key
"PMDresult".  For example, to ignore a timeout in a PMDeviceGetVersion call:

  Try
    dev.Version(major, minor)
  Catch ex As Exception When ex.Data("PMDresult").Equals(PMDresult.ERR_Timeout)
    ' Recover as appropriate
  End Try


PMDevent.vb 
----------------------------------------
The file PMDevent.vb contains Visual Basic .NET code for handling 
event notifications generated and sent via TCP/IP by certain Prodigy/CME models.

The CSTestApp C# example demonstrates this functionality.

There are two event handler classes: PMDMagellanEventhandler and PMDIOEventhandler.
Each handler will send a TCP packet containing PMDEventArgs on ports 40200 and 40300 
respectively when an event occurs.

The PMDMagellanEventhandler handles events generated by the Magellan host interrupt feature.
(See the Magellan User's Guide for details). 

Setup:
To specify which Magellan events to be notified of set the PMDAxis.InterruptMask equal to one 
or more of the PMDEventMask bits.

Notification data:
PMDEventArgs.EventAxis will contain the axis that the event occured on. 
PMDEventArgs.EventData will contain one or more of the PMDEventMask bits that caused the event.


The PMDIOEventhandler handles events generated by the external digital IO signals.

Setup:
To specify which IO events to be notified of set the following 16-bit peripheral IO registers:

Register        		Address	
---------------------------------------
Interrupt mask			0x250
Positive edge trigger enable	0x260
Negattive edge trigger enable	0x270

Bits	Signals
---------------------------------------
0-3	Digital Inputs 1-4
4-7	Reserved
8-15	Digital IO 1-8


Notification data:
PMDEventArgs.EventAxis will always be 0
PMDEventArgs.EventData will contain one or more of the digital IO bits that generated the event.





